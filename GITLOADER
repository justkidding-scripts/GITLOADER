#!/bin/bash

# GITLOADER - Interactive GitHub Upload Tool
# Advanced CLI tool for uploading projects to GitHub

# set -e  # Disabled for interactive mode

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${PURPLE}[HEADER]${NC} $1"
}

print_step() {
    echo -e "${CYAN}[STEP]${NC} $1"
}

# ASCII Art Logo
show_logo() {
    clear
    echo -e "${CYAN}"
    echo "  ██████╗ ██╗████████╗██╗      ██████╗  █████╗ ██████╗ ███████╗██████╗ "
    echo " ██╔════╝ ██║╚══██╔══╝██║     ██╔═══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗"
    echo " ██║  ███╗██║   ██║   ██║     ██║   ██║███████║██║  ██║█████╗  ██████╔╝"
    echo " ██║   ██║██║   ██║   ██║     ██║   ██║██╔══██║██║  ██║██╔══╝  ██╔══██╗"
    echo " ╚██████╔╝██║   ██║   ███████╗╚██████╔╝██║  ██║██████╔╝███████╗██║  ██║"
    echo "  ╚═════╝ ╚═╝   ╚═╝   ╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚═════╝ ╚══════╝╚═╝  ╚═╝"
    echo -e "${NC}"
    echo -e "${YELLOW}                    Interactive GitHub Upload Tool${NC}"
    echo -e "${WHITE}                        Version 2.0${NC}"
    echo ""
}

# Show help
show_help() {
    echo -e "${WHITE}GITLOADER - Interactive GitHub Upload Tool${NC}"
    echo ""
    echo -e "${CYAN}COMMANDS:${NC}"
    echo "  ${GREEN}upload${NC}     - Upload current project to GitHub"
    echo "  ${GREEN}new${NC}       - Create new project and upload"
    echo "  ${GREEN}status${NC}     - Check GitHub CLI status"
    echo "  ${GREEN}setup${NC}     - Setup GitHub CLI authentication"
    echo "  ${GREEN}help${NC}      - Show this help"
    echo "  ${GREEN}exit${NC}      - Exit GITLOADER"
    echo ""
    echo -e "${CYAN}FEATURES:${NC}"
    echo "  ✅ Interactive project creation"
    echo "  ✅ Automatic git initialization"
    echo "  ✅ Smart file detection"
    echo "  ✅ README.md generation"
    echo "  ✅ MIT License addition"
    echo "  ✅ Public/Private repositories"
    echo "  ✅ Project templates"
    echo ""
}

# Check GitHub CLI status
check_gh_status() {
    print_step "Checking GitHub CLI status..."
    
    if ! command -v gh &> /dev/null; then
        print_error "GitHub CLI (gh) is not installed!"
        print_info "Installing GitHub CLI..."
        
        # Try to install gh
        if command -v apt &> /dev/null; then
            sudo apt update && sudo apt install gh -y
        elif command -v yum &> /dev/null; then
            sudo yum install gh -y
        elif command -v brew &> /dev/null; then
            brew install gh
        else
            print_error "Cannot install GitHub CLI automatically. Please install it manually."
            print_info "Visit: https://cli.github.com/"
            return 1
        fi
    fi
    
    if ! gh auth status &> /dev/null; then
        print_warning "Not authenticated with GitHub CLI!"
        return 1
    fi
    
    print_success "GitHub CLI is ready!"
    return 0
}

# Setup GitHub CLI authentication
setup_gh() {
    print_step "Setting up GitHub CLI authentication..."
    print_info "This will open a browser for GitHub authentication"
    
    if gh auth login; then
        print_success "GitHub CLI authentication successful!"
    else
        print_error "GitHub CLI authentication failed!"
        return 1
    fi
}

# Interactive project creation
create_new_project() {
    print_header "Creating New Project"
    
    # Get project name
    echo -e "${CYAN}Enter project name:${NC}"
    read -p "> " PROJECT_NAME
    
    if [[ -z "$PROJECT_NAME" ]]; then
        print_error "Project name cannot be empty!"
        return 1
    fi
    
    # Get project description
    echo -e "${CYAN}Enter project description:${NC}"
    read -p "> " PROJECT_DESC
    
    # Get project type
    echo -e "${CYAN}Select project type:${NC}"
    echo "1) Python Script"
    echo "2) Bash Script"
    echo "3) Web Project"
    echo "4) CLI Tool"
    echo "5) Custom"
    read -p "> " PROJECT_TYPE
    
    # Create project directory
    print_step "Creating project directory..."
    mkdir -p "$PROJECT_NAME"
    cd "$PROJECT_NAME"
    
    # Create files based on project type
    case $PROJECT_TYPE in
        1)
            create_python_project "$PROJECT_NAME" "$PROJECT_DESC"
            ;;
        2)
            create_bash_project "$PROJECT_NAME" "$PROJECT_DESC"
            ;;
        3)
            create_web_project "$PROJECT_NAME" "$PROJECT_DESC"
            ;;
        4)
            create_cli_project "$PROJECT_NAME" "$PROJECT_DESC"
            ;;
        5)
            create_custom_project "$PROJECT_NAME" "$PROJECT_DESC"
            ;;
        *)
            print_warning "Invalid selection, creating custom project..."
            create_custom_project "$PROJECT_NAME" "$PROJECT_DESC"
            ;;
    esac
    
    # Upload to GitHub
    upload_to_github "$PROJECT_NAME" "$PROJECT_DESC"
}

# Create Python project template
create_python_project() {
    local name="$1"
    local desc="$2"
    
    print_step "Creating Python project files..."
    
    # Main Python file
    cat > "${name}.py" << EOF
#!/usr/bin/env python3
"""
$name - $desc
"""

def main():
    print("Hello from $name!")

if __name__ == "__main__":
    main()
EOF
    
    # Requirements file
    cat > requirements.txt << EOF
# Add your Python dependencies here
# Example: requests>=2.25.1
EOF
    
    # Setup script
    cat > setup.sh << EOF
#!/bin/bash
echo "Setting up $name..."
pip3 install -r requirements.txt
chmod +x ${name}.py
echo "Setup complete!"
EOF
    
    chmod +x setup.sh
    chmod +x "${name}.py"
}

# Create Bash project template
create_bash_project() {
    local name="$1"
    local desc="$2"
    
    print_step "Creating Bash project files..."
    
    # Main bash file
    cat > "${name}.sh" << EOF
#!/bin/bash

# $name - $desc

echo "Hello from $name!"
EOF
    
    # Install script
    cat > install.sh << EOF
#!/bin/bash
echo "Installing $name..."
sudo cp ${name}.sh /usr/local/bin/${name}
echo "Installation complete!"
EOF
    
    chmod +x "${name}.sh"
    chmod +x install.sh
}

# Create Web project template
create_web_project() {
    local name="$1"
    local desc="$2"
    
    print_step "Creating Web project files..."
    
    # HTML file
    cat > index.html << EOF
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>$name</title>
</head>
<body>
    <h1>$name</h1>
    <p>$desc</p>
</body>
</html>
EOF
    
    # CSS file
    cat > style.css << EOF
body {
    font-family: Arial, sans-serif;
    margin: 40px;
    background-color: #f5f5f5;
}

h1 {
    color: #333;
}
EOF
    
    # JavaScript file
    cat > script.js << EOF
console.log('Hello from $name!');
EOF
}

# Create CLI project template
create_cli_project() {
    local name="$1"
    local desc="$2"
    
    print_step "Creating CLI project files..."
    
    # Main CLI file
    cat > "${name}.py" << EOF
#!/usr/bin/env python3
"""
$name - $desc
A command-line interface tool
"""

import argparse
import sys

def main():
    parser = argparse.ArgumentParser(description='$desc')
    parser.add_argument('--version', action='version', version='$name 1.0')
    
    args = parser.parse_args()
    print("Hello from $name CLI!")

if __name__ == "__main__":
    main()
EOF
    
    # Setup script
    cat > setup.sh << EOF
#!/bin/bash
echo "Setting up $name CLI..."
pip3 install -r requirements.txt
sudo cp ${name}.py /usr/local/bin/${name}
chmod +x /usr/local/bin/${name}
echo "CLI setup complete!"
EOF
    
    # Requirements
    cat > requirements.txt << EOF
argparse
EOF
    
    chmod +x "${name}.py"
    chmod +x setup.sh
}

# Create custom project template
create_custom_project() {
    local name="$1"
    local desc="$2"
    
    print_step "Creating custom project files..."
    
    # Main file
    cat > "${name}" << EOF
#!/bin/bash
# $name - $desc

echo "Hello from $name!"
EOF
    
    chmod +x "${name}"
}

# Upload current project to GitHub
upload_current_project() {
    print_header "Uploading Current Project"
    
    # Get project name
    echo -e "${CYAN}Enter repository name:${NC}"
    read -p "> " REPO_NAME
    
    if [[ -z "$REPO_NAME" ]]; then
        print_error "Repository name cannot be empty!"
        return 1
    fi
    
    # Get project description
    echo -e "${CYAN}Enter repository description:${NC}"
    read -p "> " REPO_DESC
    
    # Ask for repository visibility
    echo -e "${CYAN}Make repository private? (y/n):${NC}"
    read -p "> " IS_PRIVATE
    
    # Ask for additional files
    echo -e "${CYAN}Add README.md? (y/n):${NC}"
    read -p "> " ADD_README
    
    echo -e "${CYAN}Add MIT License? (y/n):${NC}"
    read -p "> " ADD_LICENSE
    
    upload_to_github "$REPO_NAME" "$REPO_DESC" "$IS_PRIVATE" "$ADD_README" "$ADD_LICENSE"
}

# Upload to GitHub function
upload_to_github() {
    local repo_name="$1"
    local repo_desc="$2"
    local is_private="${3:-n}"
    local add_readme="${4:-y}"
    local add_license="${5:-y}"
    
    print_step "Preparing upload to GitHub..."
    
    # Initialize git if needed
    if [[ ! -d ".git" ]]; then
        print_step "Initializing git repository..."
        git init
        git config user.name "GitLoader"
        git config user.email "gitloader@example.com"
    fi
    
    # Add README if requested
    if [[ "$add_readme" == "y" ]]; then
        print_step "Adding README.md..."
        cat > README.md << EOF
# $repo_name

$repo_desc

## Installation

\`\`\`bash
git clone https://github.com/\$(gh api user --jq .login)/$repo_name.git
cd $repo_name
\`\`\`

## Usage

Add your usage instructions here.

## License

This project is licensed under the MIT License.
EOF
    fi
    
    # Add License if requested
    if [[ "$add_license" == "y" ]]; then
        print_step "Adding MIT License..."
        cat > LICENSE << EOF
MIT License

Copyright (c) $(date +%Y) $repo_name

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF
    fi
    
    # Add all files
    print_step "Adding files to git..."
    git add .
    
    # Commit changes
    print_step "Committing changes..."
    git commit -m "Initial commit: $repo_name"
    
    # Rename branch to main
    git branch -M main
    
    # Create GitHub repository
    print_step "Creating GitHub repository..."
    
    local gh_cmd="gh repo create $repo_name"
    
    if [[ "$is_private" == "y" ]]; then
        gh_cmd="$gh_cmd --private"
    else
        gh_cmd="$gh_cmd --public"
    fi
    
    if [[ -n "$repo_desc" ]]; then
        gh_cmd="$gh_cmd --description \"$repo_desc\""
    fi
    
    gh_cmd="$gh_cmd --source=. --push"
    
    if eval $gh_cmd; then
        print_success "Repository created and uploaded successfully!"
        print_success "Repository URL: https://github.com/$(gh api user --jq .login)/$repo_name"
    else
        print_error "Failed to create repository"
        return 1
    fi
}

# Main interactive loop
main() {
    show_logo
    
    while true; do
        echo -e "${WHITE}GITLOADER>${NC} "
        read -p "" command
        
        case $command in
            "upload")
                upload_current_project
                ;;
            "new")
                create_new_project
                ;;
            "status")
                check_gh_status
                ;;
            "setup")
                setup_gh
                ;;
            "help")
                show_help
                ;;
            "exit")
                print_success "Goodbye!"
                exit 0
                ;;
            "")
                # Empty command, continue
                ;;
            *)
                print_error "Unknown command: $command"
                print_info "Type 'help' for available commands"
                ;;
        esac
        
        echo ""
        echo -e "${YELLOW}Press Enter to continue...${NC}"
        read
        show_logo
    done
}

# Check if running interactively
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
